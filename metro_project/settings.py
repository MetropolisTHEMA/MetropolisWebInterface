"""
Django settings for metro_project project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from pathlib import Path
from django.contrib.messages import constants as message_constants
import os
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

# Read settings from settings.json file.
settings_filename = os.path.join(BASE_DIR, 'settings.json')
if os.path.isfile(settings_filename):
    with open(settings_filename) as settings_file:
        settings = json.load(settings_file)
else:
    settings = dict()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = settings.get(
    'secret_key', '91ya#w-9!5nru9fzhd%x5rwds3*zjkvxer9&8lxpc!j^2#@e9+')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = settings.get('debug', True)

ALLOWED_HOSTS = settings.get('allowed_hosts', ['localhost', '127.0.0.1'])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Local app
    'metro_app',
    'users',
    'api',

    # 3rd party app
    'crispy_forms',  # pip install django-crispy-forms
    'django.contrib.gis',
    'colorfield',          # from django-colorfield
    'rest_framework',
    'drf_dynamic_fields',
    'django_filters',
    'django_tables2',
    'bootstrap4',     # pip install django-bootstrap4
    'corsheaders',  # pip install django-cors-headers
                    # Access-Control-Allow-Origin' header
                    # For javascript api
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # django core header
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'metro_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'metro_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# 'ENGINE': 'django.db.backends.postgresql'

if 'database' in settings:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': settings['database'].get('name', 'metroweb'),
            'USER': settings['database'].get('user', 'postgres'),
            'PASSWORD': settings['database'].get('password', ''),
            'HOST': settings['database'].get('host', 'localhost'),
            'PORT': settings['database'].get('port', 5432),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'sql.log',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Cors (django core header)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# Location where you will store your static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

LOGIN_URL = 'home'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'login'
# AUTH_USER_MODEL = 'users.CustomUser'

MESSAGE_LEVEL = message_constants.DEBUG
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'
CRISPY_TEMPLATE_PACK = "bootstrap4"
# DJANGO_TABLES2_PAGE_RANGE = 10
